  [
  {
  "input": "{\n01?\n test=1\n}",
  "minimised_modl": "{01?test=1}",
  "expected_output": "{\n \"test\" : 1\n}\n"
},
  {"input":  "_person(  \n name(\n   speak=say\n   first=John\n   last=Smith\n )\n)\n%person>name>speak=%person>name>first",
    "minimised_modl":  "_person(name(speak=say;first=John;last=Smith));%person>name>speak=%person>name>first",
    "expected_output":   "{\n    \"say\": \"John\"\n}"},
  {"input":  "_test=[[a;b]];letters2=%test>0>0",
    "minimised_modl":  "_test=[[a;b]];letters2=%test>0>0",
    "expected_output":   "{\"letters2\": \"a\"}"},
  {"input": "?=[a;b;c;d]:[1;2;3;4;5]\ntest=%1>0",
    "minimised_modl": "?=[a;b;c;d]:[1;2;3;4;5];test=%1>0",
    "expected_output": "{\n \"test\" : 1\n}\n"
  },
  {"input": "_test=(a=b=c=d=f)\nx=%test>a>b>c>d",
    "minimised_modl": "_test=(a=b=c=d=f)\nx=%test>a>b>c>d",
    "expected_output": "{\"x\":\"f\"}"},
  {"input": "a(b(c(d(e(f=1)))))\ntesting=%a>b>c>d>e>f",
    "minimised_modl": "a(b(c(d(e(f=1)))))\ntesting=%a>b>c>d>e>f",
    "expected_output": "[ {\"a\" : {\"b\" : {\"c\" : {\"d\" : {\"e\" : {\"f\" : 1}}}}}}, {\"testing\":1}]"},
  {"input": "_test=(a=b=c=d=f)\ntesting=%test>a>b>c>d",
    "minimised_modl": "_test=(a=b=c=d=f)\ntesting=%test>a>b>c>d",
    "expected_output": "{\"testing\":\"f\"}"},
  {"input": "country=gb;x=[{ country=gb? this /country=us? that }]",
    "minimised_modl": "country=gb;x=[{ country=gb? this /country=us? that }]",
    "expected_output": "[{\"country\" : \"gb\"}, { \"x\" : [ \"this\" ]}]"},
  {"input": "_a=3;_b=3;c={a=b?true/?false}",
    "minimised_modl": "_a=3;_b=3;c={a=b?true/?false}",
    "expected_output": "{\"c\": true}"},
  {"input": "a=1;b=2;b={{a=1}|{b=2}?true/?false}",
    "minimised_modl": "a=1;b=2;b={{a=1}|{b=2}?true/?false}",
    "expected_output": "[{\"a\": 1},{\"b\": 2},{\"b\": true}]"},
  {"input": "_a=1\n_b=2\nx={a=b?}",
    "minimised_modl": "_a=1;_b=2;x={a=b?}",
    "expected_output": "{\"x\":false}"},
  {"input": "_a=1\n_b=1\nx={a=b?}",
    "minimised_modl": "_a=1;_b=1;x={a=b?}",
    "expected_output": "{\"x\":true}"},

{
  "input": "_test=1~:2\n\nresult={\n test=1~:2?\n     yes\n /?\n    no\n}",
  "minimised_modl": "_test=1~:2;result={test=1~:2?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, {
  "input": "_test=\"http://www.tesco.com\"\n\nresult={\n test=\"http://www.tesco.com\"?\n     yes\n /?\n    no\n}",
  "minimised_modl": "_test=http~://www.tesco.com;result={test=\"http://www.tesco.com\"?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, {
  "input": "_test=\"http://www.tesco.com\"\n\nresult={\n test=\"http://www.tesco.com\"?\n     yes\n /?\n    no\n}",
  "minimised_modl": "_test=http~://www.tesco.com;result={test=\"http://www.tesco.com\"?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, 
{
  "input": "_co=at\n_l=de\n{\n co=at?\n   country=Austria\n   language={\n     l=fr?\n       French\n     /l=de?\n       German\n     /?\n       Other\n   }\n /?\n   country=Other\n}",
  "minimised_modl": "_co=at;_l=de;{co=at?country=Austria;language={l=fr?French/l=de?German/?Other}/?country=Other}",
  "expected_output": "[ {\n \"country\" : \"Austria\"\n}, {\n \"language\" : \"German\"\n} ]\n"
}, {
  "input": "true2 = 01\ntrue1 = true\nfalse2 = 00\nfalse1 = false\nnull2 = 000\nnull1 = null",
  "minimised_modl": "true2=01;true1=01;false2=00;false1=00;null2=000;null1=000",
  "expected_output": "[ {\n \"true2\" : true\n}, {\n \"true1\" : true\n}, {\n \"false2\" : false\n}, {\n \"false1\" : false\n}, {\n \"null2\" : null\n}, {\n \"null1\" : null\n} ]\n"
}, {
  "input": "_person(  \n name(\n   first=John\n   last=Smith\n )\n)\nsay=%person>name>first",
  "minimised_modl": "_person(name(first=John;last=Smith));say=%person>name>first",
  "expected_output": "{\"say\":\"John\"}"
}, {
  "input": "_person(  \n name(\n   first=John\n   last=Smith\n )\n)\nsay=%person>name>first",
  "minimised_modl": "_person(name(first=John;last=Smith));say=%person>name>first",
  "expected_output": "{\n \"say\" : \"John\"\n}\n"
}, {
  "input": "_C=gb\n_COUNTRIES(\n us=United States\n gb=United Kingdom\n de=Germany\n)\n\ncountry_name = %COUNTRIES>%C",
  "minimised_modl": "_C=gb;_COUNTRIES(us=United States;gb=United Kingdom;de=Germany);country_name=%COUNTRIES>%C",
  "expected_output": "{\n \"country_name\" : \"United Kingdom\"\n}\n"
},  {
  "input": "*class(\n *id=car\n *name=car\n *superclass=map\n *assign=[\n   [m]\n   [m;md]\n ]\n)\n\n_C=gb\n\ncar=Bentley:{C=ru?ContinentalRussia GT/?Continental GT}",
  "minimised_modl": "*c(*i=car;*n=car;*s=map;*a=[m]:[m;md]);_C=gb;car=Bentley:{C=ru?ContinentalRussia GT/?Continental GT}",
  "expected_output": "{\n \"car\" : {\n   \"m\" : \"Bentley\",\n   \"md\" : \"Continental GT\"\n }\n}\n"
}, {
  "input": "_person(  \n name(\n   first=\"John\"\n )\n)\na=%person>name>first",
  "minimised_modl": "_person(name(first=John));a=%person>name>first",
  "expected_output": "{\n \"a\" : \"John\"\n}\n"
}, 
 {
  "input": "_test=abc\n\n{\n test?\n   result=test is defined\n /?\n   result=test is not defined\n}",
  "minimised_modl": "_test=abc;{test?result=test is defined/?result=test is not defined}",
  "expected_output": "{\n \"result\" : \"test is defined\"\n}\n"
}, {
  "input": "{\n true?\n   result=true\n}\n",
  "minimised_modl": "{01?result=01}",
  "expected_output": "{\n \"result\" : true\n}\n"
}, {
  "input": "_test=true\n\n{\n test?\n   result=%test\n}\n",
  "minimised_modl": "_test=01;{test?result=%test}",
  "expected_output": "{\n \"result\" : true\n}\n"
}, {
  "input": "_test=false\n\n{\n test?\n   result=result is true\n /?\n   result=result is false\n}",
  "minimised_modl": "_test=00;{test?result=result is true/?result=result is false}",
  "expected_output": "{\n \"result\" : \"result is false\"\n}\n"
}, {
  "input": "{\n test?\n   result=test is defined\n /?\n   result=test is not defined\n}\n",
  "minimised_modl": "{test?result=test is defined/?result=test is not defined}",
  "expected_output": "{\n \"result\" : \"test is not defined\"\n}\n"
}, {
  "input": "{\n !test?\n   result=test is not defined\n /?\n   result=test is defined\n}\n",
  "minimised_modl": "{!test?result=test is not defined/?result=test is defined}",
  "expected_output": "{\n \"result\" : \"test is not defined\"\n}\n"
}, {
  "input": "_colour = green\n_test = { colour=green? true /? false } \n\n{\n !test?\n   result=it's not green\n /?\n   result=it's green\n}",
  "minimised_modl": "_colour=green;_test={colour=green?01/?00};{!test?result=it's not green/?result=it's green}",
  "expected_output": "{\n \"result\" : \"it's green\"\n}\n"
}, {
  "input": "_test=1\nresult={\n %test=1?\n   yes\n /?\n   no\n}",
  "minimised_modl": "_test=1;result={%test=1?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, {
  "input": "_test=1\nresult={\n test=1?\n   yes\n /?\n   no\n}",
  "minimised_modl": "_test=1;result={test=1?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, {
  "input": "_test=1\nresult={\n _test=1?\n   yes\n /?\n   no\n}",
  "minimised_modl": "_test=1;result={_test=1?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, {
  "input": "_test=1\nresult={\n %_test=1?\n   yes\n /?\n   no\n}",
  "minimised_modl": "_test=1;result={%_test=1?yes/?no}",
  "expected_output": "{\n \"result\" : \"yes\"\n}\n"
}, 
 {
  "input": "{\ntrue?\n test=1\n}",
  "minimised_modl": "{01?test=1}",
  "expected_output": "{\n \"test\" : 1\n}\n"
}, {
  "input": "_test[a;b;c];alex=%test>0",
  "minimised_modl": "_test=a:b:c;alex=%test>0",
  "expected_output": "{\n \"alex\" : \"a\"\n}\n"
}, {
  "input": "_bool=true\n{\n%bool?\n test=1\n}",
  "minimised_modl": "_bool=01;{%bool?test=1}",
  "expected_output": "{\n \"test\" : 1\n}\n"
}, {
  "input": "_co = gb\ntest = {\n co = gb?\n   UK\n /?\n   Other\n}",
  "minimised_modl": "_co=gb;test={co=gb?UK/?Other}",
  "expected_output": "{\n \"test\" : \"UK\"\n}\n"
}, {
  "input": "?=0:1:2\nresult={\n%1>1?\n yes\n/?\n no\n}",
  "minimised_modl": "?=0:1:2;result={%1>1?yes/?no}",
  "expected_output": "{\n \"result\" : \"no\"\n}\n"
}, {
  "input": "_test_vars(\n one = 1\n two = 2\n)\n\nfirst_number = %test_vars>one",
  "minimised_modl": "_test_vars(one=1;two=2);first_number=%test_vars>one",
  "expected_output": "{\n \"first_number\" : 1\n}\n"
}, {
  "input": "_C=gb\n_COUNTRIES[\n United States\n United Kingdom\n Germany\n]\n\ncountry_name = %COUNTRIES>0",
  "minimised_modl": "_C=gb;_COUNTRIES=United States:United Kingdom:Germany;country_name=%COUNTRIES>0",
  "expected_output": "{\n \"country_name\" : \"United States\"\n}\n"
}, {
  "input": "(_C=gb\n{C=gb?test1=123}\ntest2=456)",
  "minimised_modl": "(_C=gb;{C=gb?test1=123};test2=456)",
  "expected_output": "{\n \"test1\" : 123,\n \"test2\" : 456\n}\n"
}, {
  "input": "{\ntrue?\n test=1\n}",
  "minimised_modl": "{01?test=1}",
  "expected_output": "{\n \"test\" : 1\n}\n"
}, {
  "input": "{\nTRUE?\n test=1\n}",
  "minimised_modl": "{01?test=1}",
  "expected_output": "{\n \"test\" : 1\n}\n"
}, {
  "input": "_test=abcdefg\nresult={\n {test!=a*}?\n   in\n /?\n   out\n}",
  "minimised_modl": "_test=abcdefg;result={{test!=a*}?in/?out}",
  "expected_output": "{\n \"result\" : \"out\"\n}\n"
}, {
  "input": "_num1 = 2\n_num2 = 1000\n\nresult={\n num1>num2?\n   num1 is bigger\n /?\n   num1 is not bigger\n}\n",
  "minimised_modl": "_num1=2;_num2=1000;result={num1>num2?num1 is bigger/?num1 is not bigger}",
  "expected_output": "{\n \"result\" : \"num1 is not bigger\"\n}\n"
},  {
  "input": "_num1 = 5\n_num2 = 2\n\nresult={\n num1>num2?\n   num1 is bigger\n /?\n   num1 is not bigger\n}",
  "minimised_modl": "_num1=5;_num2=2;result={num1>num2?num1 is bigger/?num1 is not bigger}",
  "expected_output": "{\n \"result\" : \"num1 is bigger\"\n}\n"
},{
  "input": "_C=fr\n{C=gb?test1=123}\ntest2=456",
  "minimised_modl": "_C=fr;{C=gb?test1=123};test2=456",
  "expected_output": "{\n \"test2\" : 456\n}\n"
}, {
  "input": "_C=ca\n_L=en\n{\n C=ca?\n  n=Tesco Canada\n  {L=fr?\n    s=Chaque Petite Contribution\n  }\n}",
  "minimised_modl": "_C=ca;_L=en;{C=ca?n=Tesco Canada;{L=fr?s=Chaque Petite Contribution}}",
  "expected_output": "{\n \"n\" : \"Tesco Canada\"\n}\n"
}, {
  "input": "_L=en\n{\n C=ca?\n    o(\n      n=Tesco Canada\n      s={L=fr?\n        Chaque Petite Contribution\n      /?\n        Every Little Helps\n      }\n    )\n}",
  "minimised_modl": "_L=en;{C=ca?o(n=Tesco Canada;s={L=fr?Chaque Petite Contribution/?Every Little Helps})}",
  "expected_output": "\n"
}, {
  "input": "_letter=a\n{\n letter=a?\n   word=Apple\n /letter=b?\n   word=Bee\n /?\n   word=Other\n}",
  "minimised_modl": "_letter=a;{letter=a?word=Apple/letter=b?word=Bee/?word=Other}",
  "expected_output": "{\n \"word\" : \"Apple\"\n}\n"
}, {
  "input": "_int=1\n{\n int=1?\n   number=one\n /int=2?\n   number=two\n /int=3?\n   number=three\n /?\n   number=other\n}",
  "minimised_modl": "_int=1;{int=1?number=one/int=2?number=two/int=3?number=three/?number=other}",
  "expected_output": "{\n \"number\" : \"one\"\n}\n"
}, {
  "input": "_number=one\n{\n number=one?\n   int=1\n /number=two?\n   int=2\n /number=three?\n   int=3\n}",
  "minimised_modl": "_number=one;{number=one?int=1/number=two?int=2/number=three?int=3}",
  "expected_output": "{\n \"int\" : 1\n}\n"
}, {
  "input": "_co=gb\n{\nco=gb?\n country = United Kingdom\n/?\n country = Other\n}",
  "minimised_modl": "_co=gb;{co=gb?country=United Kingdom/?country=Other}",
  "expected_output": "{\n \"country\" : \"United Kingdom\"\n}\n"
}, {
  "input": "_co=gb\n{\nco=gb?\n country = United Kingdom\n/?\n country = Other\n}",
  "minimised_modl": "_co=gb;{co=gb?country=United Kingdom/?country=Other}",
  "expected_output": "{\n \"country\" : \"United Kingdom\"\n}\n"
}, {
  "input": "_co = gb\ntest = {\n co = gb?\n   test=123\n /?\n   test\n}",
  "minimised_modl": "_co=gb;test={co=gb?test=123/?test}",
  "expected_output": "{\n \"test\" : {\n   \"test\" : 123\n }\n}\n"
}, {
  "input": "_co = fr\ntest = {\n co = gb?\n   test=123\n /?\n   test\n}",
  "minimised_modl": "_co=fr;test={co=gb?test=123/?test}",
  "expected_output": "{\n \"test\" : \"test\"\n}\n"
},  "input": "_co=ca\n_l=fr\n{\n { co = ca & l = fr } | co = fr?\n   support_number=14161234567\n /?\n   support_number=441270123456\n}",
  "minimised_modl": "_co=ca;_l=fr;{{co=ca&l=fr}|co=fr?support_number=14161234567/?support_number=441270123456}",
  "expected_output": "{\n \"support_number\" : 14161234567\n}\n"
}, {
  "input": "_input=\"hi apple ios\"\n{\n {input=*apple*ios*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_input=hi apple ios;{{input=*apple*ios*}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_input=\"An iOS string\"\n{\n {input=*iOS*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_input=An iOS string;{{input=*iOS*}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_input=\"An iOS string\"\n{\n !{input=iOS*}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_input=An iOS string;{!{input=iOS*}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_number=42\n{\n {number>41}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_number=42;{{number>41}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_co=ca\n{\n co = fr?\n   support_number=14161234567\n /?\n   support_number=441270123456\n}",
  "minimised_modl": "_co=ca;{co=fr?support_number=14161234567/?support_number=441270123456}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_country=gb\n{\n country=us|gb|au?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_country=gb;{country=us|gb|au?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : 441270123456\n}\n"
}, {
  "input": "_test=gb\nresult={test=gb|au?No/?Yes}",
  "minimised_modl": "_test=gb;result={test=gb|au?No/?Yes}",
  "expected_output": "{\n \"result\" : \"No\"\n}\n"
}, {
  "input": "_number=42\n{\n !{number>41}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_number=42;{!{number>41}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : [ \"International Clients\", 14161234567 ]\n}\n"
}, {
  "input": "_country=gb\n{\n !{country=us|gb|au}?\n   support_number=441270123456\n /?\n   support_number=International Clients:14161234567\n}",
  "minimised_modl": "_country=gb;{!{country=us|gb|au}?support_number=441270123456/?support_number=International Clients:14161234567}",
  "expected_output": "{\n \"support_number\" : [ \"International Clients\", 14161234567 ]\n}\n"
},  {
  "input": "_var=2\n*L=\"http://s3-eu-west-1.amazonaws.com/modltestfiles/testing.txt!\"\nprint=%update_date\n",
  "minimised_modl": "_var=2;*L=http~://s3-eu-west-1.amazonaws.com/modltestfiles/testing.txt!;print=%update_date",
  "expected_output": "{\n \"print\" : \"20180921 08:20 2\"\n}\n"
},  {
  "input": "_test=(\n  numbers=[[1;2;3;4;5];[6;7;8;9;10]]\n)\n \ntesting=%test>numbers>0>0",
  "minimised_modl": "_test=(numbers=[[1;2;3;4;5];[6;7;8;9;10]]);testing=%test>numbers>0>0",
  "expected_output": "{\n  \"testing\" : 1\n}"
}, {
  "input": "_test=(\n  numbers=(\"one\"=1)\n)\n \ntesting = this is a string that includes a reference with a letter s after it `%test>numbers>one`s",
  "minimised_modl": "_test=(numbers=(one=1));testing=this is a string that includes a reference with a letter s after it `%test>numbers>one`s",
  "expected_output": "{\n  \"testing\" : \"this is a string that includes a reference with a letter s after it 1s\"\n}"
}, {
  "input": "_test=(\n  numbers=(\"v\"=TEST)\n)\n \ntesting = this is a string that includes extra transforms for the value `%test>numbers>v.d`_value",
  "minimised_modl": "_test=(numbers=(v=TEST));testing=this is a string that includes extra transforms for the value `%test>numbers>v.d`_value",
  "expected_output": "{\n  \"testing\" : \"this is a string that includes extra transforms for the value test_value\"\n}"
}, {
  "input": "_test=(\n  first=(\"v\"=TEST)\n  second=(\"v\"=TEST2)\n)\n \ntesting = this is a string that includes extra transforms for the value `%test>second>v.d`_value",
  "minimised_modl": "_test=(first=(v=TEST);second=(v=TEST2));testing=this is a string that includes extra transforms for the value `%test>second>v.d`_value",
  "expected_output": "{\n  \"testing\" : \"this is a string that includes extra transforms for the value test2_value\"\n}"
}, {
  "input": "_test=(\n  first=(\"v1\"=one)\n  second=(\"v2\"=two:three)\n)\n \ntesting = \"`%test>second>v2>1`\"",
  "minimised_modl": "_test=(first=(v1=one);second=(v2=two:three));testing=`%test>second>v2>1`",
  "expected_output": "{\n  \"testing\" : \"three\"\n}\n"
}, {
  "input": "_test=(\n  first=(\"v1\"=[one])\n  second=(\"v2\"=two:three)\n)\n \ntesting = \"`%test>first>v1>0``%test>second>v2>0``%test>second>v2>1`\"",
  "minimised_modl": "_test=(first=(v1=[one]);second=(v2=two:three));testing=`%test>first>v1>0``%test>second>v2>0``%test>second>v2>1`",
  "expected_output": "{\n  \"testing\" : \"onetwothree\"\n}\n"
}, {
  "input": "_test=(\n  first=(\"v1\"=(one=(two=three)))\n)\n \ntesting = \"`%test>first>v1>one>two`\"",
  "minimised_modl": "_test=(first=(v1=(one=(two=three))));testing=`%test>first>v1>one>two`",
  "expected_output": "{\n  \"testing\" : \"three\"\n}\n"
},
  {"input" : "_test=( numbers=[[1;2;3;4;5];[6;7;8;9;10]]\n)\n \ntesting=%test>numbers>0>0",
    "minimised_modl" : "_test=(numbers=[[1;2;3;4;5];[6;7;8;9;10]]);testing=%test>numbers>0>0",
    "expected_output" : "{\"testing\":1}"
  },
  {"input" : "_test=(\n  numbers=(\"one\"=1)\n)\n\ntesting = this is a string that includes a reference with a letter s after it `%test>numbers>one`s",
    "minimised_modl" : "_test=(numbers=(\"one\"=1));testing = this is a string that includes a reference with a letter s after it `%test>numbers>one`s",
    "expected_output" : "{\"testing\":\"this is a string that includes a reference with a letter s after it 1s\"}"
  },
  {"input" : "_test=(\n  numbers=(\"v\"=TEST)\n)\n \ntesting = this is a string that includes extra transforms for the value `%test>numbers>v.d`_value",
    "minimised_modl" : "_test=(numbers=(\"v\"=TEST));testing = this is a string that includes extra transforms for the value `%test>numbers>v.d`_value",
    "expected_output" : "{\"testing\":\"this is a string that includes extra transforms for the value test_value\"}"
  },
  {"input" : "_test=(\n  first=(\"v\"=TEST)\n  second=(\"v\"=TEST2)\n)\n \ntesting = this is a string that includes extra transforms for the value `%test>second>v.d`_value",
    "minimised_modl" : "_test=(first=(\"v\"=TEST);second=(\"v\"=TEST2));testing = this is a string that includes extra transforms for the value `%test>second>v.d`_value",
    "expected_output" : "{\"testing\":\"this is a string that includes extra transforms for the value test2_value\"}"
  },
  {"input" : "_test=(\n  first=(\"v1\"=one)\n  second=(\"v2\"=two:three)\n)\n \ntesting = \"`%test>second>v2>1`\"",
    "minimised_modl" : "_test=(first=(\"v1\"=one);second=(\"v2\"=two:three));testing = \"`%test>second>v2>1`\"",
    "expected_output" : "{\"testing\":\"three\"}"
  },
  {"input" : "_test=(\n  first=(\"v1\"=[one])\n  second=(\"v2\"=two:three)\n)\n \ntesting = \"`%test>first>v1>0``%test>second>v2>0``%test>second>v2>1`\"",
    "minimised_modl" : "_test=(first=(\"v1\"=[one]);second=(\"v2\"=two:three));testing = \"`%test>first>v1>0``%test>second>v2>0``%test>second>v2>1`\"",
    "expected_output" : "{\"testing\":\"onetwothree\"}"
  },
  {"input" : "_test=(\n  first=(\"v1\"=(one=(two=three)))\n)\n \ntesting = \"`%test>first>v1>one>two`\"",
    "minimised_modl" : "_test=(first=(\"v1\"=(one=(two=three))));testing = \"`%test>first>v1>one>two`\"",
    "expected_output" : "{\"testing\":\"three\"}"
  },

  {"input": "tony=hungry\nneeds_food_1={tony=hungry?true/?false}\nneeds_food_2={!tony=hungry?false/?true}\nneeds_food_3={tony!=hungry?false/?true}\nneeds_food_3={!tony!=hungry?true/?false}",
    "minimised_modl": "tony=hungry\nneeds_food_1={tony=hungry?true/?false}\nneeds_food_2={!tony=hungry?false/?true}\nneeds_food_3={tony!=hungry?false/?true}\nneeds_food_3={!tony!=hungry?true/?false}",
    "expected_output": "[{\"tony\": \"hungry\"},{\"needs_food_1\": true},{\"needs_food_2\": true},{\"needs_food_3\": true},{\"needs_food_3\": true}]"

  },

  {"input": "_c=de\nresult={c!=de|at?German or Austrian/?Other}",
    "minimised_modl": "_c=de\nresult={c!=de|at?German or Austrian/?Other}",
    "expected_output": "{\"result\":\"Other\"}"},
  {"input": "_test = 1\nresult={!test!=1?one/?Other}",
    "minimised_modl": "_test = 1\nresult={!test!=1?one/?Other}",
    "expected_output": "{\"result\":\"one\"}"},
  {"input": "_x=[1;2:3:4]\na=%x>1>1",
    "minimised_modl": "_x=[1;2:3:4]\na=%x>1>1",
    "expected_output": "{\"a\":3}"},
]